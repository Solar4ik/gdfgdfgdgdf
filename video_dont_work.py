import asyncio
import io
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.enums import ChatAction
import keyboards_handers

dp = Dispatcher()
bot = Bot('6497474153:AAEYBrxR66f_KpSVb00__JRuCI8Lp6AuMZ4')
updateskb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text='0.2', callback_data='0.2'),
            InlineKeyboardButton(text='0.3', callback_data='0.3'),
        ]
    ]
)

@dp.callback_query(lambda c: c.data.startswith('0.'))
async def process_callback(callback_query: CallbackQuery):
    await callback_query.answer()

    if callback_query.data == '0.2':
        await callback_query.message.answer('[0.2]15.02.24.–í –¥–∞–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º—ã –¥–æ–±–∞–≤–∏–ª–∏ —Å–∫–∞—á–∫—É –≤–∏–¥–µ–æ —Å —é—Ç—É–±–∞ –≤ –Ω–∞–π–ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç API\n–≠—Ç–æ –µ—â—ë –Ω–µ —Ñ–∏–Ω–∞–ª, –∏ –º—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –∫ –±–æ–ª—å—à–µ–º—É. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø–æ–∏—Å–∫–∞—Ö –ª—É—á—à–µ–≥–æ API –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º –Ω–∞–º–Ω–æ–≥–æ –ø—Ä–∏—è—Ç–Ω–µ–µ ‚úÖ')
    elif callback_query.data == '0.3':
        await callback_query.message.answer('[0.3]16.02.24.–í –¥–∞–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º—ã –ø–æ–ø—Ä–∞–≤–∏–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏, —Ç–µ–ø–µ—Ä—å —Å—Ç–∞–ª–æ –Ω–∞–º–Ω–æ–≥–æ –ª–µ–≥—á–µ —Ç.–∫ –º—ã –¥–æ–±–∞–≤–∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –∏ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –µ—Å–ª–∏ –≤–≤—ë–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL‚úÖ')
@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer(f"{message.from_user.first_name}, –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∏–∫—Ç–æ–∫ –∏–ª–∏ YouTube, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∏–¥–µ–æ –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞\n–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É —Å –∫–Ω–æ–ø–æ–∫ ",reply_markup=keyboards_handers.main_kb)

@dp.message()
async def commands_handler(message: types.Message):
    msg = message.text.lower()
    if msg == 'problems' :
        await message.answer(
            '–°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º –≤ –±–æ—Ç–µ –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å:\n–ë–æ–ª—å—à–æ–µ –≤—Ä–µ–º—è –æ—Ç–∑—ã–≤–∞ —É API\n–ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ '
            '—Ñ–∞–π–ª–æ–≤\n–Ω–µ—Ç—É –≤—ã–±–æ—Ä–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π(–ø—Ä–æ–±–ª–µ–º–∞ —Å API)\n–ò–Ω–æ–≥–¥–∞ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ –≤–æ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–Ω–∏—è '
            '–±–æ—Ç–∞\n–û—Ç—Å—É—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏\n–ù–æ –Ω–µ —Å—Ç–æ–∏—Ç –∑–∞–±—ã—Ç—å —á—Ç–æ –±–æ—Ç –µ—â—ë —Å—ã—Ä–æ–π,'
            '–∏ —ç—Ç–æ –Ω–µ –∫–æ–Ω–µ—á–Ω–∞—è –≤–µ—Ä—Å–∏—èüòâ')
    if msg == 'updates' :
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=updateskb) 
    if msg == "func":
        await message.answer('Youtube - ‚úÖ\nTikTok - ‚úÖ\nReddit - ‚õî\nTwitter - ‚õî\nFacebook - ‚õî\nInstagram- ‚õî  ' )
    if msg == "help":
        await message.answer('–î–ª—è –ø–æ–º–æ—â–∏ –∏–ª–∏ –≤ —Å–ª—É—á–∞–µ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã—Ö –æ—à–∏–±–æ–∫, –Ω–∞–ø–∏—à–∏—Ç–µ - @Solarka')
@dp.message()
async def process_message(message: types.Message):
    text = message.html_text
    try:
        if 'https://www.tiktok.com/' in text or 'https://vm.tiktok.com/' in text:
            msg_anw2 = await message.answer('‚åõ')
            link_tt = text
            url_vid = await fetch_video(link_tt)

            if url_vid:
                await send_file(message, url_vid)
                await bot.delete_message(chat_id=msg_anw2.chat.id, message_id=msg_anw2.message_id)
            else:
                await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ —Å TikTok. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.')

        if 'https://www.youtube.com/' in text or 'https://youtu.be/' in text:
            msg_anw1 = await message.answer('‚åõ')
            link_yt = text
            url_vid = await fetch_youtube_video(link_yt)

            if url_vid:
                await send_file(message, url_vid)
                await bot.delete_message(chat_id=msg_anw1.chat.id, message_id=msg_anw1.message_id)
            else:
                await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ —Å YouTube. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.')

    except Exception as e:
        print(e)


async def fetch_video(link):
    url = "https://tiktok-video-no-watermark2.p.rapidapi.com/"

    querystring = {"url": link, "hd": "1"}

    headers = {
        "X-RapidAPI-Key": "7d5e940360mshd3b8e8e5b90b830p1c279djsn4e035800944e",
        "X-RapidAPI-Host": "tiktok-video-no-watermark2.p.rapidapi.com"
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, params=querystring) as response:
                data = await response.json()
                return data['data']['play']
    except Exception as e:
        print(e)


async def fetch_youtube_video(link):
    url = "https://youtube-audio-video-download.p.rapidapi.com/geturl"
    querystring = {"video_url": link}
    headers = {
        "X-RapidAPI-Key": "7d5e940360mshd3b8e8e5b90b830p1c279djsn4e035800944e",
        "X-RapidAPI-Host": "youtube-audio-video-download.p.rapidapi.com"
    }
    try:
        async with aiohttp.ClientSession(headers=headers) as session:
            async with session.get(url, params=querystring) as response:
                data = await response.json()
                return data.get('video_high')
    except Exception as e:
        print(e)


async def send_file(message: types.Message, url_vid):
    await message.bot.send_chat_action(
        chat_id=message.chat.id,
        action=ChatAction.UPLOAD_DOCUMENT,
    )
    file = io.BytesIO()
    url = url_vid
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            result_bytes = await response.read()

    file.write(result_bytes)
    await message.reply_document(
        document=types.BufferedInputFile(
            file=file.getvalue(),
            filename='video.mp4'
        ),
    )


async def main():
    logging.basicConfig(level=logging.INFO)

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
